//
//  ForeCastHomeInteractor.swift
//  AppWeather
//
//  Created by Jirawat on 28/10/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import RxSwift
import UIKit

protocol ForeCastHomeBusinessLogic {
    func getForeCastDays(city: String)

    func showGreeting(request: ForeCastHome.Show.Request)
    
    // DataSource
    func getDataSourceCount() -> Int
    func getDataSourceItem(indexPath: IndexPath) -> GetForeCastHomeItemModel
}

protocol ForeCastHomeDataStore {
    var name: String { get set }
}

class ForeCastHomeInteractor: ForeCastHomeBusinessLogic, ForeCastHomeDataStore {
    var name: String = ""

    var presenter: ForeCastHomePresentationLogic?
    lazy var worker: ForeCastHomeWorkable? = {
        ForeCastHomeWorker()
    }()

    private var dataSource: [GetForeCastHomeItemModel] = []
    
    // DataSource
    func getDataSourceCount() -> Int {
        return dataSource.count
    }
    
    func getDataSourceItem(indexPath: IndexPath) -> GetForeCastHomeItemModel {
        return dataSource[indexPath.row]
    }
    
    fileprivate var disposeBag = DisposeBag()

    func showGreeting(request: ForeCastHome.Show.Request) {
        let response = ForeCastHome.Show.Response(name: name)
        presenter?.presentGreeting(response: response)
    }

    func getForeCastDays(city: String) {
        worker?.getForeCast(city: city).subscribe(onSuccess: { [weak self] response in
            
            self?.dataSource.append(contentsOf: response.list!)
            self?.presenter?.presentTableReloadData()

        }, onFailure: { [weak self] error in
            self?.presenter?.presentTableReloadData()
            print("Error: \(error)")
        }, onDisposed: nil).disposed(by: disposeBag)
    }
}
