//
//  WeatherHomeInteractor.swift
//  AppWeather
//
//  Created by Jirawat on 27/10/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import RxSwift
import UIKit

protocol WeatherHomeBusinessLogic {
    func fetch()
    func openWeatherDetail(indexPath: IndexPath)

    // DataSource
    func getDataSourceCount() -> Int
    func getDataSourceItem(indexPath: IndexPath) -> GetWeatherHomeItemModel
}

protocol WeatherHomeDataStore {
    var cityID: Int? { get set }
}

final class WeatherHomeInteractor: WeatherHomeBusinessLogic, WeatherHomeDataStore {
    var presenter: WeatherHomePresentationLogic?
    lazy var worker: WeatherHomeWorkable? = {
        WeatherHomeWorker()
    }()

    var cityID: Int?

    // RX
    fileprivate var disposeBag = DisposeBag()

    // Store
    private var dataSource: [GetWeatherHomeItemModel] = []
    private var isLoading: Bool = false

    // DataSource
    func getDataSourceCount() -> Int {
        return dataSource.count
    }

    func getDataSourceItem(indexPath: IndexPath) -> GetWeatherHomeItemModel {
        return dataSource[indexPath.row]
    }

    func fetch() {
        isLoading = true
        worker?.getHomeWeather().subscribe(onSuccess: { [weak self] response in
//            if let items = response.name {
            ////                self?.dataSource.append(contentsOf: items)
            ////                self?.presenter?.presentTableReloadData()
//
//                print("odfsf",items)
//            }

            print("kdopfs", response.name, response.timezone)
            self?.isLoading = false
        }, onFailure: { [weak self] error in
            self?.presenter?.presentTableReloadData()
            self?.isLoading = false
            print("Error: \(error)")
        }, onDisposed: nil).disposed(by: disposeBag)
    }

    func openWeatherDetail(indexPath: IndexPath) {
        let weather = getDataSourceItem(indexPath: indexPath)
        cityID = weather.id
        presenter?.presentWeatherDetail()
    }
}
