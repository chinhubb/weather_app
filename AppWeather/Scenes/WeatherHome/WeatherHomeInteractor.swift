//
//  WeatherHomeInteractor.swift
//  AppWeather
//
//  Created by Jirawat on 27/10/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import RxSwift
import UIKit

protocol WeatherHomeBusinessLogic {
    func fetch(city: String)
}

protocol WeatherHomeDataStore {
    var dataWeather: GetWeatherHomeElement? { get }
    var nameCity: String? { get set }
}

final class WeatherHomeInteractor: WeatherHomeBusinessLogic, WeatherHomeDataStore {
    var dataWeather: GetWeatherHomeElement?
    var nameCity: String?
    
    var presenter: WeatherHomePresentationLogic?
    lazy var worker: WeatherHomeWorkable? = {
        WeatherHomeWorker()
    }()

    fileprivate var disposeBag = DisposeBag()
    private var isLoading: Bool = false

    func fetch(city: String) {
        isLoading = true
        worker?.getHomeWeather(city: city).subscribe(onSuccess: { [weak self] response in
            self?.presenter?.presentWeather(res: response)
            self?.dataWeather = response
            self?.isLoading = false
        }, onFailure: { [weak self] error in
            self?.isLoading = false
            print("Error: \(error)")
        }, onDisposed: nil).disposed(by: disposeBag)
    }
    
    func openMovieDetail() {
        nameCity = dataWeather?.name
        presenter?.presentMovieDetail()
    }
}
